using System;
using System.Drawing;
using System.Net.Security;

namespace Shelly.Abstractions.TwoFactor.Providers.Qr
{
    /// <summary>
    /// Provides QR codes generated by QRickit.
    /// </summary>
    /// <seealso href="http://qrickit.com/qrickit_apps/qrickit_api.php"/>.
    public class QRicketQrCodeProvider : BaseHttpQrCodeProvider, IQrCodeProvider
    {
        /// <summary>
        /// Represents the filetype to be returned.
        /// </summary>
        public enum QRicketImageFormat
        {
            /// <summary>PNG</summary>
            Png = 'p',
            /// <summary>GIF</summary>
            Gif = 'g',
            /// <summary>JPEG</summary>
            Jpeg = 'j'
        }

        /// <summary>
        /// Gets the <see cref="ErrorCorrectionLevel"/> for the QR code.
        /// </summary>
        public ErrorCorrectionLevel ErrorCorrectionLevel { get; private set; }

        /// <summary>
        /// Gets the background color to be used for the QR code.
        /// </summary>
        public Color BackgroundColor { get; private set; }

        /// <summary>
        /// Gets the foreground color to be used for the QR code.
        /// </summary>
        public Color ForegroundColor { get; private set; }

        /// <summary>
        /// Gets the <see cref="QRicketImageFormat"/> of the QR code.
        /// </summary>
        public QRicketImageFormat ImageFormat { get; private set; }

        /// <summary>
        /// <see cref="BaseHttpQrCodeProvider.BaseUri"/> for this QR code provider.
        /// </summary>
        private static readonly Uri baseuri = new Uri("http://qrickit.com/api/qr");

        /// <summary>
        /// Initializes a new instance of a <see cref="QRicketQrCodeProvider"/> with the specified
        /// <see cref="ErrorCorrectionLevel"/>, <see cref="BackgroundColor"/>, <see cref="ForegroundColor"/>, 
        /// <see cref="QRicketImageFormat">ImageFormat</see> and <see cref="RemoteCertificateValidationCallback"/>.
        /// </summary>
        /// <param name="errorCorrectionLevel">The <see cref="ErrorCorrectionLevel"/> to use when generating QR codes.</param>
        /// <param name="backgroundColor">The background color to be used for the QR code.</param>
        /// <param name="foregroundColor">The foreground color to be used for the QR code.</param>
        /// <param name="imageFormat">The <see cref="QRicketImageFormat"/> of the QR code.</param>
        /// <param name="remoteCertificateValidationCallback">
        /// The <see cref="RemoteCertificateValidationCallback"/> to use when generating QR codes.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException">
        /// Thrown when an invalid <see cref="ErrorCorrectionLevel"/> or <see cref="QRicketImageFormat"/> is specified.
        /// </exception>
        public QRicketQrCodeProvider(
            ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel.Low, 
            Color? backgroundColor = null, 
            Color? foregroundColor = null, 
            QRicketImageFormat imageFormat = QRicketImageFormat.Png, 
            RemoteCertificateValidationCallback remoteCertificateValidationCallback = null
        )
            : base(baseuri, remoteCertificateValidationCallback)
        {
            if (!Enum.IsDefined(typeof(ErrorCorrectionLevel), errorCorrectionLevel))
                throw new ArgumentOutOfRangeException(nameof(errorCorrectionLevel));
            ErrorCorrectionLevel = errorCorrectionLevel;

            BackgroundColor = backgroundColor ?? Color.White;
            ForegroundColor = foregroundColor ?? Color.Black;

            if (!Enum.IsDefined(typeof(QRicketImageFormat), imageFormat))
                throw new ArgumentOutOfRangeException(nameof(imageFormat));
            ImageFormat = imageFormat;
        }

        /// <summary>
        /// Gets the MIME type of the image.
        /// </summary>
        /// <returns>Returns the MIME type of the image.</returns>
        /// <seealso cref="IQrCodeProvider"/>
        /// <exception cref="InvalidOperationException">
        /// Thrown when an unknown <see cref="QRicketImageFormat"/> is used.
        /// </exception>
        public string GetMimeType()
        {
            switch (ImageFormat)
            {
                case QRicketImageFormat.Png:
                    return "image/png";
                case QRicketImageFormat.Gif:
                    return "image/gif";
                case QRicketImageFormat.Jpeg:
                    return "image/jpeg";
            }
#pragma warning disable CA1303 // Do not pass literals as localized parameters
            throw new InvalidOperationException("Unknown imageformat");
#pragma warning restore CA1303 // Do not pass literals as localized parameters
        }

        /// <summary>
        /// Downloads / retrieves / generates a QR code as image.
        /// </summary>
        /// <param name="text">The text to encode in the QR code.</param>
        /// <param name="size">The desired size (width and height equal) for the image.</param>
        /// <returns>Returns the binary representation of the image.</returns>
        /// <seealso cref="IQrCodeProvider"/>
        public byte[] GetQrCodeImage(string text, int size)
        {
            return DownloadData(GetUri(text, size));
        }

        /// <summary>
        /// Builds an <see cref="Uri"/> based on the instance's <see cref="BaseHttpQrCodeProvider.BaseUri"/>.
        /// </summary>
        /// <param name="qrText">The text to encode in the QR code.</param>
        /// <param name="size">The desired size of the QR code.</param>
        /// <returns>A <see cref="Uri"/> to the QR code.</returns>
        private Uri GetUri(string qrText, int size)
        {
            return new Uri(BaseUri,
                "?qrsize=" + size
                + "&e=" + Char.ToLowerInvariant(((char)ErrorCorrectionLevel))
                + "&bgdcolor=" + Color2Hex(BackgroundColor)
                + "&fgdcolor=" + Color2Hex(ForegroundColor)
                + "&t=" + (char)ImageFormat
                + "&d=" + Uri.EscapeDataString(qrText)
            );
        }
    }
}
